package dao

import (
	"cve-sa-backend/iniconf"
	"cve-sa-backend/models"
	"cve-sa-backend/utils"
	"cve-sa-backend/utils/entity/cve_sa"

	"gorm.io/gorm"
)

type compatibilitySolution struct{}

var DefaultCompatibilitySolution = compatibilitySolution{}

func (c compatibilitySolution) GetSolutionList(lang string) (data []string, err error) {
	if err = iniconf.DB.
		Model(&models.OeCompatibilitySolution{}).
		Select("distinct(solution) as solution").
		Where("lang = ?", lang).
		Order("solution asc").
		Pluck("solution", &data).Error; err != nil {
		return nil, err
	}
	return
}

func (c compatibilitySolution) GetCertificationTypeList(lang string) (data []string, err error) {
	if err = iniconf.DB.
		Model(&models.OeCompatibilitySolution{}).
		Select("distinct(certification_type) as type").
		Where("lang = ?", lang).
		Order("certification_type asc").
		Pluck("type", &data).Error; err != nil {
		return nil, err
	}
	return
}

func (c compatibilitySolution) FindAllSolution(req cvesa.OeCompSearchRequest) (datas []models.OeCompatibilitySolution, total int64, err error) {
	q := iniconf.DB
	query := q.Model(&models.OeCompatibilitySolution{})
	page, size := getPage(req.Pages)
	if req.Solution != "" {
		query = query.Where("solution = ?", req.Solution)
	}

	if req.CertificationType != "" {
		query = query.Where("certification_type = ?", req.CertificationType)
	}

	if req.Lang != "" {
		query = query.Where("lang = ?", req.Lang)
	}

	if req.KeyWord != "" {
		query = query.Where(
			q.Where("server_vendor like ?", "%"+req.KeyWord+"%").
				Or("server_Model like ?", "%"+req.KeyWord+"%").
				Or("os like ?", "%"+req.KeyWord+"%"),
		)
	}

	if err = query.Count(&total).Error; err != nil {
		iniconf.SLog.Error(err)
		return
	}
	if total == 0 {
		return
	}
	query = query.Order("id desc").Limit(size).Offset((page - 1) * size)
	if err = query.Find(&datas).Error; err != nil {
		iniconf.SLog.Error(err)
		return
	}

	return
}

func (c compatibilitySolution) FindOneSolution(data *models.OeCompatibilitySolution) (*models.OeCompatibilitySolution, error) {
	err := iniconf.DB.Where("id = ?", data.Id).First(data).Error
	if utils.ErrorNotFound(err) {
		return nil, nil
	}

	return data, err
}

func (c compatibilitySolution) DeleteSolutionForLang(lang string, tx *gorm.DB) (err error) {
	err = tx.Exec("delete from oe_compatibility_solution where lang = ?", lang).Error

	return
}

func (c compatibilitySolution) CreateDriver(datas []models.OeCompatibilitySolution, tx *gorm.DB) (err error) {
	err = tx.Model(&models.OeCompatibilitySolution{}).Create(&datas).Error

	return
}
