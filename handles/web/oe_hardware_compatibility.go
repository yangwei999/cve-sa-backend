package web

import (
	"cve-sa-backend/dao"
	"cve-sa-backend/models"
	"cve-sa-backend/utils/entity/cve_sa"
)

func FindAllHardwareCompatibility(req cvesa.OeCompSearchRequest) (*cvesa.ResultData, error) {
	hardware, total, err := dao.DefaultCompatibilityHardware.FindAllHardware(req)
	if err != nil {
		return nil, err
	}

	return returnHardware(hardware, total), nil
}

func returnHardware(datas []*models.OeCompatibilityHardware, total int64) *cvesa.ResultData {
	var hardwareCompatibility = make([]cvesa.HardwareCompatibility, 0, len(datas))
	for _, v := range datas {
		hardwareCompatibility = append(hardwareCompatibility, cvesa.HardwareCompatibility{
			OeCompatibilityHardware: *v,
			BoardCards:              make([]models.OeCompatibilityHardwareAdapter, 0)})
	}
	return &cvesa.ResultData{
		SecurityNoticeList:  make([]cvesa.SecurityNoticeData, 0),
		CveDatabaseList:     make([]cvesa.DatabaseData, 0),
		ApplicationCompList: make([]models.ROeCompatibilityApplication, 0),
		HardwareCompList:    hardwareCompatibility,
		DriverCompList:      make([]models.OeCompatibilityDriver, 0),
		Total:               int(total),
	}
}

func GetHardwareCompatibilityById(id int64) (*cvesa.HardwareCompatibility, error) {
	data, err := dao.DefaultCompatibilityHardware.GetOneHardware(&models.OeCompatibilityHardware{Id: id})
	if err != nil {
		return nil, err
	}
	if data == nil {
		return nil, nil
	}

	return &cvesa.HardwareCompatibility{OeCompatibilityHardware: *data, BoardCards: make([]models.OeCompatibilityHardwareAdapter, 0)}, nil
}

func GetCpuList(lang string) (datas []string, err error) {
	datas, err = dao.DefaultCompatibilityHardware.GetCpuList(lang)
	return
}

func ByhardwareId(hardwareId int64) (datas []models.OeCompatibilityHardwareAdapter, err error) {
	datas, err = dao.DefaultCompatibilityHardwareAdapter.ByhardwareId(hardwareId)
	return
}

func GetOsForHardware(lang string) (datas []string, err error) {
	datas, err = dao.DefaultCompatibilityHardware.GetOsForHardware(lang)
	return
}

func GetArchitectureListForHardware(lang string) (datas []string, err error) {
	datas, err = dao.DefaultCompatibilityHardware.GetArchitectureListForHardware(lang)
	return
}
