package web

import (
	"cve-sa-backend/dao"
	"cve-sa-backend/models"
	"cve-sa-backend/utils/entity/cve_sa"
)

func FindAllSolutionCompatibility(req cvesa.OeCompSearchRequest) (*cvesa.ResultData, error) {
	solutionCompatibility, total, err := dao.DefaultCompatibilitySolution.FindAllSolution(req)
	if err != nil {
		return nil, err
	}

	return returnSolutionCompatibility(solutionCompatibility, total), nil
}

func returnSolutionCompatibility(datas []models.OeCompatibilitySolution, total int64) *cvesa.ResultData {
	if len(datas) == 0 {
		datas = make([]models.OeCompatibilitySolution, 0)
	}
	return &cvesa.ResultData{
		SecurityNoticeList:  make([]cvesa.SecurityNoticeData, 0),
		CveDatabaseList:     make([]cvesa.DatabaseData, 0),
		ApplicationCompList: make([]models.ROeCompatibilityApplication, 0),
		HardwareCompList:    make([]cvesa.HardwareCompatibility, 0),
		DriverCompList:      make([]models.OeCompatibilityDriver, 0),
		SolutionCompList:    datas,
		Total:               int(total),
	}
}

func GetSolutionList(lang string) (data []string, err error) {
	data, err = dao.DefaultCompatibilitySolution.GetSolutionList(lang)
	return
}

func GetCertificationTypeList(lang string) (data []string, err error) {
	data, err = dao.DefaultCompatibilitySolution.GetCertificationTypeList(lang)
	return
}
