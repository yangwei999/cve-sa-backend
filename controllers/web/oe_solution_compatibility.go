package controllers

import (
	"cve-sa-backend/handles/web"
	"cve-sa-backend/iniconf"
	"cve-sa-backend/utils/entity/cve_sa"
	"cve-sa-backend/utils/tools"

	"github.com/gin-gonic/gin"
	"github.com/gin-gonic/gin/binding"
)

func FindAllSolutionCompatibility(c *gin.Context) {
	var req cvesa.OeCompSearchRequest

	if err := c.ShouldBindWith(&req, binding.JSON); err != nil {
		iniconf.SLog.Error(err)
		tools.QueryFailure(c)
		return
	}

	datas, err := web.FindAllSolutionCompatibility(req)
	if err != nil {
		iniconf.SLog.Error("findAllSolutionCompatibility", err)
		tools.Failure(c, err.Error())
		return
	}
	tools.Success(c, datas)
}

func GetSolutionListForSolution(c *gin.Context) {
	lang := c.DefaultQuery("lang", "zh")

	datas, err := web.GetSolutionList(lang)
	if err != nil {
		iniconf.SLog.Error("getSolutionList :", err)
		tools.Failure(c, err.Error())
		return
	}
	tools.Success(c, datas)
}

func GetCertificationTypeListForSolution(c *gin.Context) {
	lang := c.DefaultQuery("lang", "zh")

	datas, err := web.GetCertificationTypeList(lang)
	if err != nil {
		iniconf.SLog.Error("getCertificationTypeList :", err)
		tools.Failure(c, err.Error())
		return
	}
	tools.Success(c, datas)
}

func GetSolutionCompatibilityById(c *gin.Context) {
	var Id struct {
		Id int64 `form:"id"`
	}

	if err := c.ShouldBindWith(&Id, binding.Query); err != nil {
		iniconf.SLog.Error(err)
		tools.QueryFailure(c)
		return
	}

	data, err := web.GetSolutionCompatibilityById(Id.Id)
	if err != nil {
		iniconf.SLog.Error("getSolutionCompatibilityById :", err)
		tools.Failure(c, err.Error())
		return
	}

	tools.Success(c, data)
}
